{"ast":null,"code":"import { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CountriesService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://restcountries.com/v3.1';\n  }\n  searchCountryByAlphaCode(code) {\n    const url = `${this.apiUrl}/alpha/${code}`;\n    return this.http.get(url).pipe(\n    // tap( countries => console.log('Paso por el tap', countries)),\n    // map(countries => []),\n    // tap(countries => console.log(countries))\n    catchError(error => of([])));\n  }\n  searchCapital(term) {\n    const url = `${this.apiUrl}/capital/${term}`;\n    return this.http.get(url).pipe(\n    // tap( countries => console.log('Paso por el tap', countries)),\n    // map(countries => []),\n    // tap(countries => console.log(countries))\n    catchError(error => of([])));\n  }\n  searchCountry(term) {\n    const url = `${this.apiUrl}/name/${term}`;\n    return this.http.get(url).pipe(\n    // tap( countries => console.log('Paso por el tap', countries)),\n    // map(countries => []),\n    // tap(countries => console.log(countries))\n    catchError(error => of([])));\n  }\n  searchRegion(term) {\n    const url = `${this.apiUrl}/region/${term}`;\n    return this.http.get(url).pipe(\n    // tap( countries => console.log('Paso por el tap', countries)),\n    // map(countries => []),\n    // tap(countries => console.log(countries))\n    catchError(error => of([])));\n  }\n}\nCountriesService.ɵfac = function CountriesService_Factory(t) {\n  return new (t || CountriesService)(i0.ɵɵinject(i1.HttpClient));\n};\nCountriesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CountriesService,\n  factory: CountriesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAmBC,EAAE,QAAa,MAAM;;;AAK3D,OAAM,MAAOC,gBAAgB;EAI3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAW,gCAAgC;EAEjB;EAExCC,wBAAwB,CAACC,IAAY;IACnC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,UAAUF,IAAI,EAAE;IAC1C,OAAO,IAAI,CAACF,IAAI,CAACK,GAAG,CAAaF,GAAG,CAAC,CAACG,IAAI;IACxC;IACA;IACA;IACAV,UAAU,CAACW,KAAK,IAAIV,EAAE,CAAC,EAAE,CAAC,CAAC,CAC5B;EACH;EAKAW,aAAa,CAAEC,IAAY;IACzB,MAAMN,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,YAAYK,IAAI,EAAE;IAC5C,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAaF,GAAG,CAAC,CAACG,IAAI;IACxC;IACA;IACA;IACAV,UAAU,CAACW,KAAK,IAAIV,EAAE,CAAC,EAAE,CAAC,CAAC,CAC5B;EACH;EAEAa,aAAa,CAAED,IAAY;IACzB,MAAMN,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,SAASK,IAAI,EAAE;IACzC,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAaF,GAAG,CAAC,CAACG,IAAI;IACxC;IACA;IACA;IACAV,UAAU,CAACW,KAAK,IAAIV,EAAE,CAAC,EAAE,CAAC,CAAC,CAC5B;EACH;EAEAc,YAAY,CAAEF,IAAY;IACxB,MAAMN,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,WAAWK,IAAI,EAAE;IAC3C,OAAO,IAAI,CAACT,IAAI,CAACK,GAAG,CAAaF,GAAG,CAAC,CAACG,IAAI;IACxC;IACA;IACA;IACAV,UAAU,CAACW,KAAK,IAAIV,EAAE,CAAC,EAAE,CAAC,CAAC,CAC5B;EACH;;AA/CWC,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAc,SAAhBd,gBAAgB;EAAAe,YADJ;AAAM","names":["catchError","of","CountriesService","constructor","http","searchCountryByAlphaCode","code","url","apiUrl","get","pipe","error","searchCapital","term","searchCountry","searchRegion","factory","providedIn"],"sourceRoot":"","sources":["/home/jaimegarcia/Documentos/Proyecto/CountryFinder/src/app/countries/services/countries.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, Observable, of, tap } from 'rxjs';\n\nimport { Country } from '../interfaces/country';\n\n@Injectable({providedIn: 'root'})\nexport class CountriesService {\n\n  private apiUrl: string = 'https://restcountries.com/v3.1'\n\n  constructor(private http: HttpClient) { }\n\n  searchCountryByAlphaCode(code: string): Observable<Country[]>{\n    const url = `${this.apiUrl}/alpha/${code}`\n    return this.http.get<Country[]>( url).pipe(\n      // tap( countries => console.log('Paso por el tap', countries)),\n      // map(countries => []),\n      // tap(countries => console.log(countries))\n      catchError(error => of([]))\n    );\n  }\n\n\n\n\n  searchCapital( term: string ): Observable<Country[]>{\n    const url = `${this.apiUrl}/capital/${term}`\n    return this.http.get<Country[]>( url).pipe(\n      // tap( countries => console.log('Paso por el tap', countries)),\n      // map(countries => []),\n      // tap(countries => console.log(countries))\n      catchError(error => of([]))\n    );\n  }\n\n  searchCountry( term: string ): Observable<Country[]>{\n    const url = `${this.apiUrl}/name/${term}`\n    return this.http.get<Country[]>( url).pipe(\n      // tap( countries => console.log('Paso por el tap', countries)),\n      // map(countries => []),\n      // tap(countries => console.log(countries))\n      catchError(error => of([]))\n    );\n  }\n\n  searchRegion( term: string ): Observable<Country[]>{\n    const url = `${this.apiUrl}/region/${term}`\n    return this.http.get<Country[]>( url).pipe(\n      // tap( countries => console.log('Paso por el tap', countries)),\n      // map(countries => []),\n      // tap(countries => console.log(countries))\n      catchError(error => of([]))\n    );\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}